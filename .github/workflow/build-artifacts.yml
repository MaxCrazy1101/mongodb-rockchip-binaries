name: Build Artifacts

on:
  push:
     tags:
      - 'r*' # Push events to matching r*, i.e. r7.0.5



jobs:
  build:
    name: Release - ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: RK3399
            os: ubuntu-22.04
            cc_flags: -march=armv8-a+crc -moutline-atomics -mtune=cortex-a72.cortex-a53 -Warray-bounds -Winterference-size
            compiler_version: 12

          # - release_for: RK3399
          #   os: ubuntu-20.04
          #   cc_flags: -march=armv8-a+crc -moutline-atomics -mtune=cortex-a72.cortex-a53
          #   name: precious-FreeBSD-x86_64.tar.gz
          #   compiler_version: 10

          # - release_for: Windows-x86_64
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   bin: precious.exe
          #   name: precious-Windows-x86_64.zip
          #   command: both

          # - release_for: macOS-x86_64
          #   os: macOS-latest
          #   target: x86_64-apple-darwin
          #   bin: precious
          #   name: precious-Darwin-x86_64.tar.gz
          #   command: both

            # more release targets here ...
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout MongoDB
        uses: actions/checkout@v4
        repository: mongodb/mongo
        ref: ${{ github.ref }}
        with:
          fetch-depth: 0

      - name: Arm-Specific Cross-Compilation Instructions
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update || echo "continuing after 'apt-get update'"
          sudo apt-get install -y gcc-${{ matrix.platform.compiler_version }}-aarch64-linux-gnu g++-${{ matrix.platform.compiler_version }}-aarch64-linux-gnu python3-venv
          sudo apt-get install -y libssl-dev:arm64 libcurl4-openssl-dev:arm64 liblzma-dev:arm64
          sudo apt-get install -y gcc python3-dev git lld

      - name: MongoDB Instructions
        run: |
          # cd ${mongodb_version}
          python3 -m venv python3-venv
          source python3-venv/bin/activate
          # python -m pip install "pip==21.0.1"
          python -m pip install pip --upgrade
          python -m pip install -r etc/pip/compile-requirements.txt
          python -m pip install keyring jsonschema memory_profiler puremagic networkx cxxfilt

      - name: MongoDB Build
        run: |
          MONGO_VERSION=${{ github.ref }#r}
          \time --verbose python3 buildscripts/scons.py -j$(($(grep -c processor /proc/cpuinfo)-1)) AR=/usr/bin/aarch64-linux-gnu-ar CC=/usr/bin/aarch64-linux-gnu-gcc-${{ matrix.platform.compiler_version }} CXX=/usr/bin/aarch64-linux-gnu-g++-${{ matrix.platform.compiler_version }} CCFLAGS="${{ matrix.platform.cc_flags }}" --dbg=off --opt=on --link-model=static --disable-warnings-as-errors --ninja generate-ninja NINJA_PREFIX=aarch64_gcc_s VARIANT_DIR=aarch64_gcc_s DESTDIR=aarch64_gcc_s
          \time --verbose ninja -f aarch64_gcc_s.ninja -j$(($(grep -c processor /proc/cpuinfo)-1)) install-devcore # For MongoDB 6.x+
        
      - name: Minimize size of executables for embedded use by removing symbols
        run: |
          pushd aarch64_gcc_s/bin
          mv mongo mongo.debug
          mv mongod mongod.debug
          mv mongos mongos.debug
          aarch64-linux-gnu-strip mongo.debug -o mongo
          aarch64-linux-gnu-strip mongod.debug -o mongod
          aarch64-linux-gnu-strip mongos.debug -o mongos

      - name: Generate release
        run: tar --group root --owner root -czvf mongodb.ce.${{ matrix.platform.release_for }}.r${MONGO_VERSION}.tar.gz LICENSE-Community.txt README.md mongo{d,,s}


      - name: Save bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('jadx-{0}', env.JADX_VERSION) }}
          # Waiting fix for https://github.com/actions/upload-artifact/issues/39 to upload zip file
          # Upload unpacked files for now
          path: build/jadx/**/*
          if-no-files-found: error
          retention-days: 30

      - name: Save exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('jadx-gui-{0}-no-jre-win.exe', env.JADX_VERSION) }}
          path: build/*.exe
          if-no-files-found: error
          retention-days: 30

      # - name: Create Release
      #         id: create_release
      #         uses: actions/create-release@latest
      #         env:
      #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #         with:
      #           tag_name: ${{ github.ref }}
      #           release_name: Release ${{ github.ref }}
      #           body: |
      #             Changes in this Release
      #             - First Change
      #             - Second Change
      #           draft: false
      #           prerelease: false

  # build-win-bundle:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up JDK
  #       uses: oracle-actions/setup-java@v1
  #       with:
  #         release: 17

  #     - name: Print Java version
  #       shell: bash
  #       run: java -version

  #     - name: Set jadx version
  #       shell: bash
  #       run: |
  #         JADX_LAST_TAG=$(git describe --abbrev=0 --tags)
  #         JADX_VERSION="${JADX_LAST_TAG:1}.$GITHUB_RUN_NUMBER-${GITHUB_SHA:0:8}"
  #         echo "JADX_VERSION=$JADX_VERSION" >> $GITHUB_ENV

  #     - name: Build with Gradle
  #       uses: gradle/gradle-build-action@v2
  #       with:
  #         arguments: dist -PbundleJRE=true

  #     - name: Save exe bundle artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ format('jadx-gui-{0}-with-jre-win', env.JADX_VERSION) }}
  #         path: jadx-gui/build/*-with-jre-win/*
  #         if-no-files-found: error
  #         retention-days: 30