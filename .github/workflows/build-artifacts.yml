name: Build Artifacts

on:
  push:
     tags:
      - 'r*' # Push events to matching r*, i.e. r7.0.5
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Set the source repository"
        required: false
        default: "mongodb/mongo"
        type: choice
        options:
          - mongodb/mongo
      source_tag:
        description: "the source tag"
        required: false
        default: "r7.0.7"
        type: string
      build_components:
        description: "SCons Targets"
        required: false
        default: "install-core"
        type: choice
        options:
          - install-mongod
          - install-mongos
          - install-core
          - install-devcore
          - install-all
          - install-all-meta
      gcc_compiler_version:
        description: "Select gcc version"
        required: false
        default: "12"
        type: choice
        options:
          - 10
          - 11
          - 12
      binaries_storage:
        description: "Select image storage type."
        required: false
        default: "save"
        type: choice
        options:
          - save
          - temp

jobs:
  build:
    name: Release - ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: RK3399
            os: ubuntu-22.04
            cc_flags: -march=armv8-a+crc -moutline-atomics -mtune=cortex-a72.cortex-a53 -Warray-bounds -Winterference-size

    runs-on: ${{ matrix.platform.os }}
    env:
      OUTPUT_NAME: mongodb.ce.${{ matrix.platform.release_for }}.${{ inputs.source_tag }}
    steps:
      - name: Initialization Arm-Specific Cross-Compilation environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo apt-get update || echo "continuing after 'apt-get update'"
          sudo apt-get install -y gcc-${{ inputs.gcc_compiler_version }}-aarch64-linux-gnu g++-${{ inputs.gcc_compiler_version }}-aarch64-linux-gnu python3-venv git
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          #sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - run: |
          sudo dpkg --add-architecture arm64
          sudo chmod 777 /etc/apt/sources.list
          sudo cat  >> /etc/apt/sources.list <<DEV
          deb [arch=arm64] http://ports.ubuntu.com/ jammy main multiverse universe
          deb [arch=arm64] http://ports.ubuntu.com/ jammy-security main multiverse universe
          deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main multiverse universe
          deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main multiverse universe
          
          DEV
          sudo apt-get update
        continue-on-error: true

      - run: |
          sudo apt-get install -y libssl-dev:arm64 libcurl4-openssl-dev:arm64 liblzma-dev:arm64

      - name: Create simulated physical disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Clone source code [ ${{ inputs.source_repo }} ]
        id: codes
        working-directory: /builder
        run: |
          REPO_URL="https://github.com/${{inputs.source_repo}}"
          # Clone source code
          git clone -q --single-branch --depth=1 --branch=${{inputs.source_tag}} ${REPO_URL} mongo
          ln -sf /builder/mongo ${GITHUB_WORKSPACE}/mongo
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: MongoDB Build
        run: |
          cd mongo/
          python3 -m venv python3-venv
          source python3-venv/bin/activate
          python3 -m pip install pip --upgrade
          python3 -m pip install -r etc/pip/compile-requirements.txt
          python3 -m pip install keyring jsonschema memory_profiler puremagic networkx cxxfilt
          df -hT ${PWD}
          #python3 buildscripts/scons.py -j$(grep -c processor /proc/cpuinfo) AR=/usr/bin/aarch64-linux-gnu-ar CC=/usr/bin/aarch64-linux-gnu-gcc-${{ inputs.gcc_compiler_version }} CXX=/usr/bin/aarch64-linux-gnu-g++-${{ inputs.gcc_compiler_version }} CCFLAGS="${{ matrix.platform.cc_flags }}" --dbg=off --opt=on --link-model=static --disable-warnings-as-errors --ninja generate-ninja NINJA_PREFIX=aarch64_gcc_s VARIANT_DIR=aarch64_gcc_s DESTDIR=aarch64_gcc_s
          \time --verbose python3 buildscripts/scons.py -j$(grep -c processor /proc/cpuinfo) AR=/usr/bin/aarch64-linux-gnu-ar CC=/usr/bin/aarch64-linux-gnu-gcc-${{ inputs.gcc_compiler_version }} CXX=/usr/bin/aarch64-linux-gnu-g++-${{ inputs.gcc_compiler_version }} CCFLAGS="${{ matrix.platform.cc_flags }}" --dbg=off --opt=on --link-model=static --disable-warnings-as-errors --ninja generate-ninja NINJA_PREFIX=aarch64_gcc_s VARIANT_DIR=aarch64_gcc_s DESTDIR=aarch64_gcc_s --linker=gold
          \time --verbose ninja -f aarch64_gcc_s.ninja -j3 ${{inputs.build_components}} # For MongoDB 6.x+
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name:  Minimize size and Generate release
        run: |
          mkdir mongo/release/
          pushd mongo/aarch64_gcc_s/bin
          mv mongod mongod.debug
          mv mongos mongos.debug
          aarch64-linux-gnu-strip mongod.debug -o mongod
          aarch64-linux-gnu-strip mongos.debug -o mongos
          mv mongod ../../release/mongod
          mv mongos ../../release/mongos
          cd ../../
          cp ./LICENSE-Community.txt ./release/LICENSE-Community.txt
          cp ./README.md ./release/README.md
          cd ./release
          tar --group root --owner root -czvf ../${{ env.OUTPUT_NAME }}.tar.gz LICENSE-Community.txt README.md mongo{d,s}


      - name: Save bundle artifact
        uses: actions/upload-artifact@v4
        if: ${{ inputs.binaries_storage }} == 'temp' && !cancelled()
        with:
          name: ${{ env.OUTPUT_NAME }}
          # Waiting fix for https://github.com/actions/upload-artifact/issues/39 to upload zip file
          # Upload unpacked files for now
          path: mongo/release
          if-no-files-found: error
          retention-days: 30

      - name: Upload the packaged MongoDB Binaries
        uses: ncipollo/release-action@main
        if: ${{ inputs.binaries_storage }} == 'save' && !cancelled()
        with:
          tag: ${{ matrix.platform.release_for }}_gcc${{ inputs.gcc_compiler_version }}
          artifacts: mongo/${{env.OUTPUT_NAME}}.tar.gz
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### MongoDB Unofficial Build
            - ${{ matrix.platform.release_for }}
            ### CC_FLAGS
            - ${{ matrix.platform.cc_flags }}

